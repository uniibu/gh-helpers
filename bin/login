#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const envPath = path.resolve(__dirname, '../.env');
require('dotenv').config({ path: envPath });
const crypto = require('crypto')
const processor = require('../lib/processor');
const prompts = require('prompts');
const pkgjson = require('../package.json');
const ghGot = require('gh-got');
const emailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
let confirmOverwrite = [{
  type: 'confirm',
  name: 'overwriteVal',
  message: 'You already have a token stored,\n Do you want to continue?',
  initial: true
}]
let confirmIntro = [{
  type: 'confirm',
  name: 'introVal',
  message: 'If you already have a Personal Access Token, you can simply add it via "gh-token xxtokenxx", Continue?',
  initial: true
}]

let authentication = [
  {
    type: 'text',
    name: 'email',
    message: 'What is your GitHub email?',
    validate: value => emailRegex.test(value)
  },
  {
    type: 'password',
    name: 'password',
    message: 'Enter your password:'
  },
  {
    type: 'number',
    name: 'otp',
    message: 'Enter your otp/2fa if applicable:',
    initial: 0
  }
];
function generateId(size = 6) {
  return crypto.randomBytes(size).toString('hex');
}
async function login(email, password, otp) {
  let headers = {
    'User-Agent': `Gh-Helpers / ${pkgjson.version}`,
    'Authorization': `Basic ${Buffer.from(`${email}:${password}`).toString('base64')}`
  };
  if (otp) {
    headers = Object.assign({}, headers, {
      'X-GitHub-OTP': otp
    });
  }
  const { body } = await ghGot('authorizations', {
    json: true,
    headers,
    body: {
      'scopes': ['repo'],
      'note': `Gh-Helpers id-${generateId()}`
    }
  });
  return { body, headers }
}
async function start() {
  const questions = confirmIntro.concat(authentication);
  const { email, password, otp, introVal } = await prompts(questions);
  if (!introVal) {
    process.exit(0)
  }
  const response = await login(email, password, otp);
  const resp = response.body;
  const headers = response.headers;
  if (resp.token) {
    processor.log('Successfully fetched your token. Saving...');
    if (process.env.GITHUB_TOKEN) {
      const overwrite = await prompts(confirmOverwrite);
      if (overwrite && !overwrite.overwriteVal) {
        process.exit(0)
      }
    }
    if (process.env.GITHUB_TOKEN_ID) {
      const deleted = await removeToken(headers);
      if (!deleted) {
        processor.log('Token was not successfully deleted');
      } else {
        processor.log('Successfully deleted previous token');
      }
    }
    processToken(resp.token, resp.id);
    processor.log('Successfully stored your new token')
  }
}
async function removeToken(headers) {
  processor.log('Removing your previous token...');
  if (headers['X-GitHub-OTP']) {
    const { otp } = await prompts({
      type: 'number',
      name: 'otp',
      message: 'Enter your otp/2fa:',
      initial: 0
    })
    headers['X-GitHub-OTP'] = otp;
  }
  const resp = await ghGot(`authorizations/${process.env.GITHUB_TOKEN_ID}`, { method: 'DELETE', headers })
  return resp.statusCode === 204;
}
async function processToken(token, tokenId) {
  fs.writeFileSync(envPath, `GITHUB_TOKEN=${token}\nGITHUB_TOKEN_ID=${tokenId}`, 'utf8');
}

start().then(process.exit).catch(e => {
  console.error(e);
  process.exit()
})